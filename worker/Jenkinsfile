pipeline {

  environment {
    AUTH_TOKEN = credentials('argocd-jenkins-deployer-token')
    ARGO_SERVER = credentials('argo-server-ip')
    VOTE_APP_URL = credentials('vote-app-url')
    RESULT_APP_URL = credentials('result-app-url')
  }

  agent {
    kubernetes {
      yamlFile 'worker/build-agent.yaml'
      defaultContainer 'docker-tools'
      idleMinutes 1
    }
  }

  stages {

    stage('Image Analysis') {
      parallel {
        stage('Image Linting') {
          steps {
            container('docker-tools') {
              sh "dockle docker.io/xvag/worker2:v62"
            }
          }
        }
        stage('Image Scan') {
          steps {
            container('docker-tools') {
              //sh "trivy image --exit-code 1 xvag/worker2:v62"
              sh "trivy image xvag/worker2:v62"
            }
          }
        }
      }
    }

    stage('Scan k8s Deploy Code') {
      steps {
        container('docker-tools') {
          sh 'kubesec scan worker/deployments/worker-deploy.yaml'
        }
      }
    }

    stage('Deploy to Dev') {
      steps {
        container('docker-tools') {
          sh 'docker run -t schoolofdevops/argocd-cli argocd app sync worker --insecure --server $ARGO_SERVER --auth-token $AUTH_TOKEN'
          sh 'docker run -t schoolofdevops/argocd-cli argocd app wait worker --health --timeout 300 --insecure --server $ARGO_SERVER --auth-token $AUTH_TOKEN'
        }
      }
    }

    stage('Dynamic Analysis') {
      parallel {
       stage('Vote front-end DAST') {
         steps {
           container('docker-tools') {
             sh 'docker run -t owasp/zap2docker-stable zap-baseline.py -t $VOTE_APP_URL || exit 0'
           }
         }
       }
       stage('Result front-end DAST') {
          steps {
            container('docker-tools') {
              sh 'docker run -t owasp/zap2docker-stable zap-baseline.py -t $RESULT_APP_URL || exit 0'
            }
          }
        }
      }
    }

  }
}
